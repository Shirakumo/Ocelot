package org.shirakumo.lichat;
import org.shirakumo.lichat.updates.*;

public class HandlerAdapter implements Handler{

    // Sigh, manual dispatch....
    public void handle(Update update){
        if(update instanceof AlreadyInChannel) handle((AlreadyInChannel)update);
        if(update instanceof Backfill) handle((Backfill)update);
        if(update instanceof BadContentType) handle((BadContentType)update);
        if(update instanceof BadName) handle((BadName)update);
        if(update instanceof ChannelUpdate) handle((ChannelUpdate)update);
        if(update instanceof ChannelnameTaken) handle((ChannelnameTaken)update);
        if(update instanceof Channels) handle((Channels)update);
        if(update instanceof Connect) handle((Connect)update);
        if(update instanceof ConnectionUnstable) handle((ConnectionUnstable)update);
        if(update instanceof ConnectionLost) handle((ConnectionLost)update);
        if(update instanceof Create) handle((Create)update);
        if(update instanceof Data) handle((Data)update);
        if(update instanceof Disconnect) handle((Disconnect)update);
        if(update instanceof Emote) handle((Emote)update);
        if(update instanceof Emotes) handle((Emotes)update);
        if(update instanceof Failure) handle((Failure)update);
        if(update instanceof IncompatibleVersion) handle((IncompatibleVersion)update);
        if(update instanceof InsufficientPermissions) handle((InsufficientPermissions)update);
        if(update instanceof InvalidPassword) handle((InvalidPassword)update);
        if(update instanceof InvalidPermissions) handle((InvalidPermissions)update);
        if(update instanceof InvalidUpdate) handle((InvalidUpdate)update);
        if(update instanceof Join) handle((Join)update);
        if(update instanceof Kick) handle((Kick)update);
        if(update instanceof Leave) handle((Leave)update);
        if(update instanceof MalformedUpdate) handle((MalformedUpdate)update);
        if(update instanceof Message) handle((Message)update);
        if(update instanceof NoSuchChannel) handle((NoSuchChannel)update);
        if(update instanceof NoSuchProfile) handle((NoSuchProfile)update);
        if(update instanceof NoSuchUser) handle((NoSuchUser)update);
        if(update instanceof NotInChannel) handle((NotInChannel)update);
        if(update instanceof Permissions) handle((Permissions)update);
        if(update instanceof Ping) handle((Ping)update);
        if(update instanceof Pong) handle((Pong)update);
        if(update instanceof Pull) handle((Pull)update);
        if(update instanceof Register) handle((Register)update);
        if(update instanceof TargetUpdate) handle((TargetUpdate)update);
        if(update instanceof TextUpdate) handle((TextUpdate)update);
        if(update instanceof TooManyConnections) handle((TooManyConnections)update);
        if(update instanceof TooManyUpdates) handle((TooManyUpdates)update);
        if(update instanceof UpdateFailure) handle((UpdateFailure)update);
        if(update instanceof UpdateTooLong) handle((UpdateTooLong)update);
        if(update instanceof UserInfo) handle((UserInfo)update);
        if(update instanceof UsernameMismatch) handle((UsernameMismatch)update);
        if(update instanceof UsernameTaken) handle((UsernameTaken)update);
        if(update instanceof Users) handle((Users)update);
    }

    public void handle(AlreadyInChannel update){}
    public void handle(Backfill update){}
    public void handle(BadContentType update){}
    public void handle(BadName update){}
    public void handle(ChannelUpdate update){}
    public void handle(ChannelnameTaken update){}
    public void handle(Channels update){}
    public void handle(Connect update){}
    public void handle(ConnectionUnstable update){}
    public void handle(Create update){}
    public void handle(Data update){}
    public void handle(Disconnect update){}
    public void handle(Emote update){}
    public void handle(Emotes update){}
    public void handle(Failure update){}
    public void handle(IncompatibleVersion update){}
    public void handle(InsufficientPermissions update){}
    public void handle(InvalidPassword update){}
    public void handle(InvalidPermissions update){}
    public void handle(InvalidUpdate update){}
    public void handle(Join update){}
    public void handle(Kick update){}
    public void handle(Leave update){}
    public void handle(MalformedUpdate update){}
    public void handle(Message update){}
    public void handle(NoSuchChannel update){}
    public void handle(NoSuchProfile update){}
    public void handle(NoSuchUser update){}
    public void handle(NotInChannel update){}
    public void handle(Permissions update){}
    public void handle(Ping update){}
    public void handle(Pong update){}
    public void handle(Pull update){}
    public void handle(Register update){}
    public void handle(TargetUpdate update){}
    public void handle(TextUpdate update){}
    public void handle(TooManyConnections update){}
    public void handle(TooManyUpdates update){}
    public void handle(UpdateFailure update){}
    public void handle(UpdateTooLong update){}
    public void handle(UserInfo update){}
    public void handle(UsernameMismatch update){}
    public void handle(UsernameTaken update){}
    public void handle(Users update){}
    public void handle(ConnectionLost update){}
}
